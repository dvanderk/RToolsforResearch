getwd()
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350")
runApp("wilmer_scatter”)
library(shiny)
library(shiny)
runApp("wilmer_scatter”)
getwd()
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp("wilmer_scatter”)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Scatterplot widget"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
#radioButtons("filetype", label = "File type for download", choices = list("png", "pdf")),
textInput("graphtitle", label = "Enter graph title", width = "50%", placeholder = "[Title]"),
radioButtons("filetype", label = "File type for download", choices = list("png", "pdf")),
downloadButton(outputId = "down", label = "Download the plot")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
#radioButtons("filetype", label = "File type for download", choices = list("png", "pdf")),
#downloadButton(outputId = "down", label = "Download the plot")
)
)
))
shinyServer( # Function title (don't think this is necessary)
function(input, output) { # Create the function
output$distPlot <- renderPlot({ # Call Shiny function that makes the plot
# Get the data
if (is.null(input$file1)) { # If there's no csv file uploaded yet
d=faithful[, 1:2] # Grab canned data set to plot
}
else { # Else
inFile <- input$file1 # Grab uploaded file
c <- read.csv(inFile$datapath, header=input$header, sep=input$sep) # Read the csv into a variable
d=c[, 1:2] # Take the first two columns of that variable
}
x=d[, 1] # Gets x value
y=d[, 2] # Gets y value
# Find good axis ranges
xmin=min(x); xmax=max(x); ymin=min(y); ymax=max(y); # Finds min and max values
xsd=sd(x) ; ysd=sd(y); # Finds SDs
xsds=(xmax-xmin)/xsd; ysds=(ymax-ymin)/ysd; # Finds out how many SDs each variable spans
if (xsds>ysds)  { # If X span is bigger...
xlim=c(xmin-xsd*.25,xmax+xsd*.25) # Set X axis to range its actual range plus .25 SD cushion
sdcush=(xsds-ysds)/2; # Find difference between SD ranges and divide by two (will add this as extra cushion to Y axis range)
ylim=c(ymin-ysd*.25-ysd*sdcush,ymax+ysd*.25+ysd*sdcush) # Set Y axis range to the SD equivalent of X axis range (centered on Y axis range) plus .25 SD cushion
}
else { # If Y span is bigger
ylim=c(ymin-ysd*.25,ymax+ysd*.25) # Set Y axis to its actual range plus .25 SD cushion
sdcush=(ysds-xsds)/2; # Find difference between SD ranges and divide by two (will add this as extra cushion to X axis range)
xlim=c(xmin-xsd*.25-xsd*sdcush,xmax+xsd*.25+xsd*sdcush) # Set X axis range to the SD equivalent of Y axis range (centered on X axis range) plus .25 SD cushion
}
# Draw the scatterplot
par(pty="s") # Forces the scatterplot to be square
plot(x, y, main=input$graphtitle, # Plots data
xlab="X label ", ylab="Y label ", pch=19, # pch selects symbol
xlim=xlim, ylim=ylim) # xlim and ylim set the axis ranges
abline(lm(y~x), col="red") # Draws least-squares line
# Save as 'filename' the 'content'
output$down <- downloadHandler(
filename =  function() {
paste("myplot", input$filetype, sep=".")
},
# content is a function with argument file. content writes the plot to the device
content = function(file) {
if(input$filetype == "png")
png(file) # open the png device
else
pdf(file) # open the pdf device
par(pty="s") # Forces the scatterplot to be square
plot(x=x, y=y, main=input$graphtitle, # Plots data
xlab="X label ", ylab="Y label ", pch=19, # pch selects symbol
xlim=xlim, ylim=ylim) # xlim and ylim set the axis ranges
abline(lm(y~x), col="red") # Draws least-squares line
dev.off()  # turn the device off
})
})
})
runApp("wilmer_scatter”)
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("wilmer_scatter”)
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350")
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
library(leaflet)
library(maps)
setwd("~/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools")
runApp("MapTools”)
runApp("MapTools”)
install.packages(c("coin", "Matrix", "mgcv", "Rcpp"))
runApp("MapTools”)
#read in data file
data<-(read.csv("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
#select onlyt the ID, Latitude, Longitude
idlatlong <- subset(data, select=c("ID", "Latitude", "Longitude"))
#remove NaN values
idlatlong <-na.omit(idlatlong)
#create vectors of latitutde and longitude for ease of use
lon <- idlatlong$Longitude
lat <- idlatlong$Latitude
df <- as.data.frame(cbind(lon,lat))
#create map with lat and long dataframe
# worldmap = data(worldMapEnv)
# m <- leaflet(df) %>%
#   #add default view to see map
#   addTiles(m) %>%
#   #create circles objetc
#   addCircles(m) %>%
#   #add our longitutde and latitude to the map
#   addCircles(lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
# #display map
# m
#create map with lat and long dataframe
worldmap = data(worldMapEnv)
m <- leaflet(df)
#add default view to see map
m <- addTiles(m)
#create circles objetc
m <- addCircles(m) #create circles objetc
#add our longitutde and latitude to the map
m <- addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
data<-(read.csv("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
#select onlyt the ID, Latitude, Longitude
idlatlong <- subset(data, select=c("ID", "Latitude", "Longitude"))
#remove NaN values
idlatlong <-na.omit(idlatlong)
lon <- idlatlong$Longitude
lat <- idlatlong$Latitude
df <- as.data.frame(cbind(lon,lat))
worldmap = data(worldMapEnv)
m <- leaflet(df)
#add default view to see map
m <- addTiles(m)
#create circles objetc
m <- addCircles(m) #create circles objetc
#add our longitutde and latitude to the map
m <- addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
worldmap = data(worldMapEnv)
m <- leaflet(df)
library(leaflet)
m <- leaflet(df)
#add default view to see map
m <- addTiles(m)
#create circles objetc
m <- addCircles(m) #create circles objetc
#add our longitutde and latitude to the map
m <- addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
runApp("MapTools”)
library(leaflet)
library(maps)
library(shiny)
runApp("MapTools”)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
