install.packages("leaflet")
install.packages("maps")
library(leaflet)
library(maps)
#read in data file
data<-(read.csv("/Users/dvanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
?directory
??directory
getwd()
#read in data file
data<-(read.csv("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
#select onlyt the ID, Latitude, Longitude
idlatlong <- subset(data, select=c("ID", "Latitude", "Longitude"))
#remove NaN values
idlatlong <-na.omit(idlatlong)
lon <- idlatlong$Longitude
lat <- idlatlong$Latitude
df <- as.data.frame(cbind(lon,lat))
#create map with lat and long dataframe
worldmap = data(worldMapEnv)
m <- leaflet(df)
#add default view to see map
m <- addTiles(m)
#create circles objetc
m <- addCircles(m) #create circles objetc
#add our longitutde and latitude to the map
m <- addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
#create map with lat and long dataframe
worldmap = data(worldMapEnv)
leaflet(df) %>%
#add default view to see map
addTiles(m) %>%
#create circles objetc
addCircles(m) %>%
#add our longitutde and latitude to the map
addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
worldmap = data(worldMapEnv)
leaflet(df) %>%
#add default view to see map
addTiles(m) %>%
#create circles objetc
addCircles(m) %>%
#add our longitutde and latitude to the map
addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
worldmap = data(worldMapEnv)
m <- leaflet(df) %>%
#add default view to see map
addTiles(m) %>%
#create circles objetc
addCircles(m) %>%
#add our longitutde and latitude to the map
addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
# Leaflet Test for Shiny
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
leaflet(df) %>%
#add default view to see map
addTiles() %>%
#create circles objetc
addCircles() %>%
#add our longitutde and latitude to the map
addCircles(lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
})
}
shinyApp(ui, server)
getwd()
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/leaflet")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools")
# Leaflet Test for Shiny
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
leaflet(df) %>%
#add default view to see map
addTiles() %>%
#create circles objetc
addCircles() %>%
#add our longitutde and latitude to the map
addCircles(lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
})
}
shinyApp(ui, server)
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
runApp("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/wilmer_scatter")
install.packages("leaflet")
install.packages("maps")
library(leaflet)
library(maps)
#read in data file
data<-(read.csv("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
#select onlyt the ID, Latitude, Longitude
idlatlong <- subset(data, select=c("ID", "Latitude", "Longitude"))
#remove NaN values
idlatlong <-na.omit(idlatlong)
#create vectors of latitutde and longitude for ease of use
lon <- idlatlong$Longitude
lat <- idlatlong$Latitude
df <- as.data.frame(cbind(lon,lat))
#create map with lat and long dataframe
worldmap = data(worldMapEnv)
m <- leaflet(df) %>%
#add default view to see map
addTiles(m) %>%
#create circles objetc
addCircles(m) %>%
#add our longitutde and latitude to the map
addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
library(leaflet)
library(maps)
#read in data file
data<-(read.csv("/Users/deevanderknaap/Desktop/Organized/Wellesley 2017-2018/Classes - Fall/PSYC 350/RTools/MapTools/SERP_Data.csv", header = TRUE))[-1,]
#select onlyt the ID, Latitude, Longitude
idlatlong <- subset(data, select=c("ID", "Latitude", "Longitude"))
#remove NaN values
idlatlong <-na.omit(idlatlong)
#create vectors of latitutde and longitude for ease of use
lon <- idlatlong$Longitude
lat <- idlatlong$Latitude
df <- as.data.frame(cbind(lon,lat))
#create map with lat and long dataframe
worldmap = data(worldMapEnv)
m <- leaflet(df) %>%
#add default view to see map
addTiles(m) %>%
#create circles objetc
addCircles(m) %>%
#add our longitutde and latitude to the map
addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
#display map
m
# #create map with lat and long dataframe
# worldmap = data(worldMapEnv)
# m <- leaflet(df)
# #add default view to see map
# m <- addTiles(m)
# #create circles objetc
# m <- addCircles(m) #create circles objetc
# #add our longitutde and latitude to the map
# m <- addCircles(m, lng = ~lon, lat = ~lat, radius = 30) #radius in meters, changes as user zooms
# #display map
# m
#
